geom_bar(aes(fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='cuisine',
y='Restaurants') +
scale_y_continuous(limits=c(0,20), breaks=seq(0,20,2)) +
scale_fill_brewer(name="Grade", palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
ggplot(data=inspections, aes (x=score)) +
stat_density(aes(color=boro), geom="line",position="identity") +
coord_cartesian(xlim=c(0,40)) +
labs(title='Density of restaurants by score and borough',
x='Score',
y='Restaurant density') +
scale_y_continuous(breaks=seq(0,0.14,0.02),
labels = scales::percent) +
scale_colour_brewer(name="Borough", palette='Set1') +
theme_bw() +
theme(legend.key=element_blank()) +
geom_vline(xintercept = c(14,28), colour='grey') +
annotate("text", x = c(6,20,35), y = 0.11, label = c('A','B','C'), size=6) +
annotate("rect", xmin = 0, xmax = 14, ymin = 0, ymax = 0.13, alpha = .2, fill='darkred') +
annotate("rect", xmin = 14, xmax = 28, ymin = 0, ymax = 0.13, alpha = .2, fill='darkblue') +
annotate("rect", xmin = 28, xmax = 60, ymin = 0, ymax = 0.13, alpha = .2, fill='darkgreen')
InsClosratiobyboro = inspections %>%
group_by(., boro) %>%
summarise(.,
closures = sum(action == 'closed' | action == 'reclosed'),
inspections = n(),
ratio = closures / inspections
)
reclosedByBoro =  inspections %>%
filter(., action == 'closed') %>%
group_by(., camis, boro, zipcode) %>%
summarize(., count = n()) %>%
group_by(., boro) %>%
summarize(., total_closed = n(),
closed_more_than_once = sum(count>1),
ratio = closed_more_than_once / total_closed)
reclosedByBoro =  inspections %>%
filter(., action == 'closed') %>%
group_by(., camis, boro) %>%
summarize(., count = n()) %>%
group_by(., boro) %>%
summarize(., total_closed = n(),
closed_more_than_once = sum(count>1),
ratio = closed_more_than_once / total_closed)
View(reclosedByBoro)
InsClosratiobyboro = inspections %>%
group_by(., boro) %>%
summarise(.,
closures = sum(action == 'closed' | action == 'reclosed'),
inspections = n(),
ratio = closures / inspections
)
View(InsClosratiobyboro)
BoroClosureRatio = left_join(InsClosratiobyboro, reclosedByBoro, by = 'boro') %>%
rename(., inspRatio = ratio.x, recloRatio = ratio.y)
ggplot(data = aes(x=inspratio, y=recloratio)) +
geom_point(aes(colour = boro), size = 3) +
labs(title='Inspection closure and repeat closure ratios by borough',
x='Inspection closure ratio',
y='Repeat closure ratio') +
scale_x_continuous(limits = c(0.01,0.025),
labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
scale_colour_brewer(palette = 'Set1') +
theme_bw() +
theme(legend.position='none') +
geom_text(aes(label=boro),
check_overlap=TRUE,
size=3,
hjust = 0,
nudge_x = 0.0003)
ggplot(data = BoroClosureRatio, aes(x=inspratio, y=recloratio)) +
geom_point(aes(colour = boro), size = 3) +
labs(title='Inspection closure and repeat closure ratios by borough',
x='Inspection closure ratio',
y='Repeat closure ratio') +
scale_x_continuous(limits = c(0.01,0.025),
labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
scale_colour_brewer(palette = 'Set1') +
theme_bw() +
theme(legend.position='none') +
geom_text(aes(label=boro),
check_overlap=TRUE,
size=3,
hjust = 0,
nudge_x = 0.0003)
ggplot(data = BoroClosureRatio, aes(x=insratio, y=recloratio)) +
geom_point(aes(colour = boro), size = 3) +
labs(title='Inspection closure and repeat closure ratios by borough',
x='Inspection closure ratio',
y='Repeat closure ratio') +
scale_x_continuous(limits = c(0.01,0.025),
labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
scale_colour_brewer(palette = 'Set1') +
theme_bw() +
theme(legend.position='none') +
geom_text(aes(label=boro),
check_overlap=TRUE,
size=3,
hjust = 0,
nudge_x = 0.0003)
BoroClosureRatio = left_join(InsClosratiobyboro, reclosedByBoro, by = 'borBoroClosureRatioo') %>%
rename(., insratio = ratio.x, recloratio = ratio.y)
View(BoroClosureRatio)
BoroClosureRatio = left_join(InsClosratiobyboro, reclosedByBoro, by = 'boro') %>%
rename(., inspratio = ratio.x, recloratio = ratio.y)
ggplot(data = BoroClosureRatio,  aes(x=inspratio, y=recloratio)) +
geom_point(aes(colour = boro), size = 3) +
labs(title='Inspection closure and repeat closure ratios by borough',
x='Inspection closure ratio',
y='Repeat closure ratio') +
scale_x_continuous(limits = c(0.01,0.025),
labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
scale_colour_brewer(palette = 'Set1') +
theme_bw() +
theme(legend.position='none') +
geom_text(aes(label=boro),
check_overlap=TRUE,
size=3,
hjust = 0,
nudge_x = 0.0003)
ggplot(data = BoroClosureRatio,  aes(x=inspratio, y=recloratio)) +
geom_point(aes(colour = boro), size = 3) +
labs(title='Closure ratios by borough',
x='Inspection closure ratio',
y='Repeat closure ratio') +
scale_x_continuous(limits = c(0.01,0.025),
labels = scales::percent) +
scale_y_continuous(labels = scales::percent) +
scale_colour_brewer(palette = 'Set1') +
theme_bw() +
theme(legend.position='none') +
geom_text(aes(label=boro),
check_overlap=TRUE,
size=3,
hjust = 0,
nudge_x = 0.0003)
ggplot(data=inspections, aes(x= cuisine, function(x)-length(x)))) +
geom_bar(aes(fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='cuisine',
y='Restaurants') +
scale_y_continuous(limits=c(0,20), breaks=seq(0,20,2)) +
scale_fill_brewer(name="Grade", palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
restByCuisineFiltered = restaurants %>%
group_by(., cuisine) %>%
summarise(., count=n()) %>%
arrange(., desc(count)) %>%
top_n(., 20, count)
restByCuisineFiltered = inspections %>%
group_by(., cuisine) %>%
summarise(., count=n()) %>%
arrange(., desc(count)) %>%
top_n(., 20, count)
restCuisineFiltered = inspections %>%
group_by(., cuisine) %>%
summarise(., count=n()) %>%
arrange(., desc(count)) %>%
top_n(., 20, count)
View(restCuisineFiltered)
ggplot(data=inspections, aes(x=reorder(boro, boro, function(x)-length(x)))) +
geom_bar(aes(fill=grade), position='dodge') +
labs(title='Restaurants by borough and grade',
x='Borough',
y='Restaurants') +
scale_y_continuous(limits=c(0,9000), breaks=seq(0,10000,1000)) +
scale_fill_brewer(name="Grade", palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
ggplot(data=inspections, aes(x= restCuisineFiltered, y= Restaurants )+
geom_bar(aes(fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='cuisine',
y='Restaurants') +
scale_y_continuous(limits=c(0,20), breaks=seq(0,20,2)) +
scale_fill_brewer(name="Grade", palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
ggplot(data=inspections, aes(x= restCuisineFiltered, y= Restaurants )+
geom_bar(aes(fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='cuisine',
y='Restaurants') +
scale_y_continuous(limits=c(0,20), breaks=seq(0,20,2)) +
scale_fill_brewer(name="Grade", palette='Set1') +
theme_bw() +
theme(legend.key=element_blank()))
ggplot(data=inspections, aes(x= restCuisineFiltered, y= Restaurants)+
geom_bar(aes(fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='cuisine',
y='Restaurants') +
scale_y_continuous(limits=c(0,20), breaks=seq(0,20,2)) +
scale_fill_brewer(name="Grade", palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
ggplot(data=inspections, aes(x= restCuisineFiltered, y= Restaurants)+
geom_bar(aes(fill=grade), position='dodge') +
labs(title='Restaurants by top 20 cuisine and grade',
x='top 20 cuisine',
y='Restaurants') +
scale_y_continuous(limits=c(0,20), breaks=seq(0,20,2)) +
scale_fill_brewer(name="Grade", palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
ggplot(data=inspections, aes(x= restCuisineFiltered, y= Restaurants)+
geom_bar(aes(fill=grade), position='dodge') +
labs(title='Restaurants by top 20 cuisine and grade',
x='top 20 cuisine',
y='Restaurants') +
scale_y_continuous(limits=c(0,20), breaks=seq(0,20,2)) +
scale_fill_brewer(name="Grade", palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
ggplot(data=inspections, x=reorder(cuisine, cuisine, function(x) length(x)))+
geom_bar(aes(fill=grade), position='dodge') +
labs(title='Restaurants by top 20 cuisine and grade',
x='top 20 cuisine',
y='Restaurants') +
scale_y_continuous(limits=c(0,20), breaks=seq(0,20,2)) +
scale_fill_brewer(name="Grade", palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
knitr::opts_chunk$set(echo = TRUE)
cuisine_flitered <- inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
inspectionsFiltered = semi_join(inspections, cuisine_flitered, by = 'cuisine')
ggplot(data=inspectionsFiltered) +
geom_bar(aes(x=reorder(cuisine, cuisine, function(x) length(x)), fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='Cuisine',
cuisine_flitered <- inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
inspectionsFiltered = semi_join(inspections, cuisine_flitered, by = 'cuisine')
cuisine_flitered <- inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
inspectionsFiltered = semi_join(inspections, cuisine_flitered, by = 'cuisine')
ggplot(data=inspectionsFiltered) +
geom_bar(aes(x=reorder(cuisine, cuisine, function(x) length(x)), fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='Cuisine',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
coord_flip() +
theme_bw() +
theme(legend.key=element_blank())
shiny::runApp('~/1')
runApp('C:/Users/Murugesan/AppData/Local/Temp/Temp1_globe-master.zip/globe-master')
runApp('~/1')
runApp('C:/Users/Murugesan/Desktop/DataScience Projects')
install.packages("dygraphs")
runApp('C:/Users/Murugesan/Desktop/DataScience Projects')
install.packages("d3heatmap")
runApp('C:/Users/Murugesan/Desktop/DataScience Projects')
raw.df <- readr::read_csv("./Data.csv")
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Shiny-London-Income-Map-master')
install.packages("rgdal")
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Shiny-London-Income-Map-master')
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Gun violence data/shiny-apps-master/gunviolence')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='muruent',
token='E544816E88D3F364940F0F1CCE0DD53A',
secret='K8Kbmmtrd2srojd1hnPXAV9wymzMyuiOlRreTT+V')
devtools::install_github("rstudio/rsconnect")
install.packages('rsconnect')
devtools::install_github("rstudio/rsconnect")
install.packages("rsconnect")
library("dplyr", lib.loc="~/R/win-library/3.5")
install.packages("shiny")
library(rsconnect)
library("dbplyr", lib.loc="~/R/win-library/3.5")
library("ggplot2", lib.loc="~/R/win-library/3.5")
library("tidyr", lib.loc="~/R/win-library/3.5")
detach("package:dbplyr", unload=TRUE)
library("dbplyr", lib.loc="~/R/win-library/3.5")
shiny::runApp('C:/Users/Murugesan/Desktop/flights')
shiny::runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
shiny::runApp('C:/Users/Murugesan/Desktop/flights_final')
library("dbplyr", lib.loc="~/R/win-library/3.5")
shiny::runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
runApp('C:/Users/Murugesan/Desktop/flights_final')
setwd("~/R")
runApp('C:/Users/Murugesan/Desktop/flights_final')
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
summary(temp)
mean_sample = mean(temp$Body.Temp)
st_sample = sd(temp$Body.Temp)
mean_population = 98.6
t.statistic = (mean_sample - 98.6)/(sd(temp$Body.Temp)/sqrt(130))
t.statistic
var.test(temp$Heart.Rate[temp$Gender == "Female"],
temp$Heart.Rate[temp$Gender == "Male"],
alternative = "greater") #p-value = 0.005502
library(dplyr)
Ma = temp %>% filter(Gender == 'Male')
Fe = temp %>% filter(Gender == 'Female')
avg = numeric()
for(i in 1:10000){
m = sample(Ma$Body.Temp, 65, replace=T)
f = sample(Fe$Body.Temp, 65, replace=T)
avg[i] = mean(f-m)
}
lower_bnd = mean(avg) - 2*sd(avg)
upper_bnd = mean(avg) + 2*sd(avg)
#5ab F-Test
#H0: Average(male body_temperature)=Average(female body_temperature)
#H1: Average(male body_temperature)<Average(female body_temperature)
# http://2012books.lardbucket.org/books/beginning-statistics/s15-chi-square-tests-and-f-tests.html
var.test(temp$Heart.Rate[temp$Gender == "Female"],
temp$Heart.Rate[temp$Gender == "Male"],
alternative = "less")
library(ggplot2)
library(datasets)
PlantGrowth
var.test(temp$Heart.Rate[temp$Gender == "Female"],
temp$Heart.Rate[temp$Gender == "Male"],
alternative = "less")
boxplot(weight ~ group, data = PlantGrowth)
library(ggplot2)
library(datasets)
PlantGrowth
sd(PlantGrowth$weight[PlantGrowth$group == "ctrl"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt1"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt2"])
ggplot(PlantGrowth, aes(x = group, y = weight))+
geom_boxplot(color = c("red", "blue", "green"))
bartlett.test(PlantGrowth$weight ~ PlantGrowth$group)
summary(aov(weight ~ group, data = PlantGrowth))
mosaicplot(HairEyeColor, shade = TRUE)`
reduced = HairEyeColor[,1:2,2]
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
reduced.test = chisq.test(reduced)
reduced.test
str(HairEyeColor)
#1ab Visualizing the data with a mosaic plot.
# A mosaic plot is a graphical display that allows you to
# examine the relationship among two or more categorical variables.
mosaicplot(HairEyeColor, shade = TRUE)
#https://medschool.vanderbilt.edu/cqs/files/cqs/media/DrTsai2_0.pdf
#Whereas most categories do not deviate very far from expected combination values,
#some appear to have high standardized residuals. In particular, the blond hair
#category for both genders with brown eyes does not contain a lot of observations.
#On the other hand, the blond hair category has a lot more than expected females
#with blue eyes.
#2a Reducing the dataset to all hair colors, brown & blue eye colors, and just
#females.
reduced = HairEyeColor[,1:2,2]
#Visualizing the reduced data with a mosaic plot.
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
#Chi-Squared test of independence.
reduced.test = chisq.test(reduced)
reduced.test
#The chi-squared test reports a significant p-value at the 0.05 level; thus we
#conclude that the hair and eye colors of females are not independent of one
#another.
#3 Calculating each category combination's contribution to the chi-squared
#statistic.
# H0: The hair and eye colors are independent of one another
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
reduced.test$observed - reduced.test$expected
# reduced.test$expected:the expected counts under the null hypothesis.
#Blonde hair and blue eyed females contributed the largest proportion to the chi-
#squared statistic with a value of 29.55; there were about 31 more observations
#in this category than we would have expected under the assumption of independence.
#Red hair and brown eyed females contributed the least proportion to the chi-
#squared statistic with a value of 1.42; there were only about 4 more observations
#in this category than we would have expected under the assumption of independence.
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
library(ggplot2)
library(datasets)
PlantGrowth
reduced = HairEyeColor[,1:2,2]
#Visualizing the reduced data with a mosaic plot.
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
#Chi-Squared test of independence.
reduced.test = chisq.test(reduced)
reduced.test
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
reduced.test$observed - reduced.test$expected
reduced.test$expected:the expected counts under the null hypothesis.
shiny::runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Gun violence data/shiny-apps-master/gunviolence')
library(readr)
gvdata13to18 <- read_csv("gvdata13to18.csv")
View(gvdata13to18)
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Gun violence data/shiny-apps-master/gunviolence')
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Gun violence data/shiny-apps-master/gunviolence')
> library(readr)
> gvdata13to18 <- read_csv("gvdata13to18.csv")
gvdata13to18 = read_csv("gvdata13to18.csv")
gv = read_csv("gvdata13to18.csv")
str(gv)
gv$n_killed
View(gv)
gv %>% group_by(state)%>% summarise(totalkilled=sum(n_killed))
shiny::runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Rshinydemo')
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Rshinydemo')
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Rshinydemo')
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)
library(knitr)
library(fiftystater)
library(testthat)
library(readr)
library(RColorBrewer)
library(dplyr)
library(plotly)
library(scales)
library(viridis)
library(assertive, warn.conflicts = FALSE)
library(shiny)
library(leaflet)
library(shinydashboard)
library(magrittr)
library(htmltools)
library(dygraphs)
library(xts)
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Gun violence data/gun-violence-data')
bystate <- d %>% group_by(state) %>% summarize(Incidents = n()) %>% arrange(n)
bystate$state <- factor(bystate$state, levels = bystate$state)
ggplot(bystate, aes(x = state, y = Incidents)) +
geom_bar(stat = "identity", aes(fill = state)) +
coord_flip() + theme_bw()+ theme (legend.position = "none")
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Gun violence data/gun-violence-data')
library("xts", lib.loc="~/R/win-library/3.5")
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)
library(knitr)
library(fiftystater)
library(testthat)
library(readr)
library(RColorBrewer)
library(dplyr)
library(plotly)
library(scales)
library(viridis)
library(assertive, warn.conflicts = FALSE)
library(shiny)
library(leaflet)
library(shinydashboard)
library(magrittr)
library(htmltools)
library(dygraphs)
library(xts)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(maps)
library(knitr)
library(fiftystater)
library(testthat)
library(readr)
library(RColorBrewer)
library(dplyr)
library(plotly)
library(scales)
library(viridis)
library(shiny)
library(leaflet)
library(shinydashboard)
library(magrittr)
library(htmltools)
library(dygraphs)
library(xts)
library(assertive, warn.conflicts = FALSE)
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Gun violence data/gun-violence-data')
runApp('C:/Users/Murugesan/Desktop/DataScience Projects/Gun violence data/gun-violence-data')
str(gun)
gun <- fread("./gun-violence-data_01-2013_03-2018.csv")
setwd("C:/Users/Murugesan/Desktop/DataScience Projects/Gun violence data/gunviolence data making graphs")
gun <- fread("./gun-violence-data_01-2013_03-2018.csv")
gun$date = as.Date(gun$date, "%m/%d/%Y")
gun %>% group_by(Months = format(date, "%m")) %>%
summarize(no.incidents = sum(n_injured + n_killed)) %>%
ggplot(aes(x = Months, y = no.incidents)) +
geom_col()
setwd("C:/Users/Murugesan/Desktop/DataScience Projects/Gun violence data/gun-violence-data")
runApp()
runApp()
runApp()
